"""
Una clase abstracta es una clase en la programaci√≥n orientada a objetos que no se puede instanciar 
directamente, es decir, no puedes crear objetos de esa clase. Su principal prop√≥sito es servir como una base para otras clases. 
Las clases abstractas permiten definir una interfaz com√∫n para un grupo de clases relacionadas, 
pero delegan los detalles de la implementaci√≥n a las clases derivadas.

Caracter√≠sticas principales de una clase abstracta:
No se puede instanciar: No puedes crear un objeto de una clase abstracta. 
En su lugar, se utiliza como base para otras clases que implementan sus m√©todos abstractos.

M√©todos abstractos: Los m√©todos abstractos son aquellos que se definen en la clase abstracta 
pero no tienen una implementaci√≥n. Las clases derivadas deben implementar estos m√©todos. En Python, se definen con el decorador @abstractmethod del m√≥dulo abc.

Puede tener m√©todos concretos: Aunque los m√©todos abstractos no tienen implementaci√≥n, 
una clase abstracta puede tener m√©todos que s√≠ tienen una implementaci√≥n completa. Estos m√©todos pueden ser heredados directamente por las clases derivadas.

Prop√≥sito: Una clase abstracta proporciona una estructura base com√∫n para otras clases. 
Define un contrato que las clases derivadas deben seguir, asegurando que ciertos m√©todos est√©n presentes y sean implementados.

"""


"""

La librer√≠a abc en Python significa "Abstract Base Classes" (Clases Base Abstractas) 
y proporciona herramientas para definir clases abstractas y m√©todos abstractos.
Una clase abstracta es una clase que sirve como base para otras clases y que no se puede instanciar directamente.
"""


from abc import ABC, abstractmethod

# Clase base abstracta para los m√©todos de pago
class MetodoPago(ABC):

    @abstractmethod
    def procesar_pago(self, monto):
        """Cada m√©todo de pago implementar√° su propia l√≥gica de procesamiento."""
        pass

    @abstractmethod
    def verificar_saldo(self):
        """Cada m√©todo de pago tendr√° su propia forma de verificar saldo."""
        pass

# Clase derivada 1: Pago con Tarjeta de Cr√©dito
class TarjetaCredito(MetodoPago):

    def __init__(self, numero, saldo):
        self.numero = numero
        self.saldo = saldo

    def verificar_saldo(self):
        print(f"üí≥ Verificando saldo disponible en la tarjeta {self.numero}...")

    def procesar_pago(self, monto):
        if self.saldo >= monto:
            self.saldo -= monto
            print(f"‚úÖ Pago de ${monto} realizado con tarjeta {self.numero}. Nuevo saldo: ${self.saldo}")
        else:
            print("‚ùå Saldo insuficiente en la tarjeta.")

# Clase derivada 2: Pago con PayPal
class PayPal(MetodoPago):

    def __init__(self, email, saldo):
        self.email = email
        self.saldo = saldo

    def verificar_saldo(self):
        print(f"üìß Verificando saldo de la cuenta PayPal: {self.email}...")

    def procesar_pago(self, monto):
        if self.saldo >= monto:
            self.saldo -= monto
            print(f"‚úÖ Pago de ${monto} realizado con PayPal ({self.email}). Nuevo saldo: ${self.saldo}")
        else:
            print("‚ùå Fondos insuficientes en PayPal.")

# Clase derivada 3: Pago con Criptomonedas
class Criptomoneda(MetodoPago):

    def __init__(self, wallet_id, saldo):
        self.wallet_id = wallet_id
        self.saldo = saldo

    def verificar_saldo(self):
        print(f"ü™ô Verificando saldo en la billetera cripto {self.wallet_id}...")

    def procesar_pago(self, monto):
        if self.saldo >= monto:
            self.saldo -= monto
            print(f"‚úÖ Pago de ${monto} realizado con criptomonedas ({self.wallet_id}). Nuevo saldo: ${self.saldo}")
        else:
            print("‚ùå Saldo insuficiente en la billetera de criptomonedas.")

# Lista con diferentes m√©todos de pago
metodos_pago = [
    TarjetaCredito("1234-5678-9876-5432", 1000),
    PayPal("usuario@email.com", 500),
    Criptomoneda("0xABC123DEF456", 300)
]

# Procesar pagos con diferentes m√©todos (polimorfismo)
for metodo in metodos_pago:
    print("\n--- Nuevo Pago ---")
    metodo.verificar_saldo()
    metodo.procesar_pago(250)  # Intentar pagar $250 con cada m√©todo

"""


Clase base abstracta MetodoPago:
La clase MetodoPago es abstracta porque hereda de ABC (Abstract Base Class), 
lo que significa que no puede ser instanciada directamente.
Define dos m√©todos abstractos: verificar_saldo y procesar_pago, 
los cuales no tienen implementaci√≥n en la clase base, pero deben ser implementados por cualquier clase 
que herede de MetodoPago.
Clases derivadas: TarjetaCredito, PayPal, Criptomoneda:
Las clases TarjetaCredito, PayPal y Criptomoneda heredan de MetodoPago y 
proporcionan implementaciones concretas para los m√©todos abstractos verificar_saldo y procesar_pago.
Polimorfismo en acci√≥n: A pesar de que cada clase tiene su propia implementaci√≥n de estos m√©todos, 
todas comparten la misma interfaz definida en la clase base (MetodoPago), lo que permite utilizarlas 
de manera intercambiable en el c√≥digo principal.
Abstracci√≥n:
La clase MetodoPago es un ejemplo de abstracci√≥n. Oculta los detalles de c√≥mo cada tipo de pago
 (tarjeta de cr√©dito, PayPal, criptomonedas) maneja la verificaci√≥n de saldo y el procesamiento de pagos, pero asegura que todos los m√©todos de pago tienen la misma estructura b√°sica.
Cada clase derivada implementa la l√≥gica interna del m√©todo seg√∫n el tipo de pago espec√≠fico, pero los usuarios solo interact√∫an con los m√©todos p√∫blicos verificar_saldo y procesar_pago, sin necesidad de conocer los detalles de la implementaci




"""